// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "email", type: "email" },
      { name: "age", type: "int" },
      { name: "first_name", type: "string" },
      { name: "last_name", type: "string" },
    ],
  },
  {
    name: "questions",
    columns: [
      { name: "question", type: "text" },
      { name: "answer", type: "text" },
      { name: "comment", type: "text" },
    ],
  },
  {
    name: "notes",
    columns: [
      { name: "title", type: "text" },
      { name: "note_content", type: "text" },
      { name: "category", type: "string", unique: true },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Questions = InferredTypes["questions"];
export type QuestionsRecord = Questions & XataRecord;

export type Notes = InferredTypes["notes"];
export type NotesRecord = Notes & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  questions: QuestionsRecord;
  notes: NotesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://ReThink-ttkus6.ap-southeast-2.xata.sh/db/ReThink",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
